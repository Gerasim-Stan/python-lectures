= slide 'Модули 101' do
    list:
      Всяко нещо в Python е част от някой модул
      Дори нещата, които пишем в интерактивната конзола, са в модул
      Всеки файл с разширение .py е модул. Името на модула е името на файла (без .py)
      Всяка директория може да бъде модул
      Файлът, от който е стартирана програмата, е с име __main__


= slide '.pyc' do
    list:
        .pyc са прекомпилирани версии на .py файловете ни
        В Python 3 стоят в директорията __pycache__
        В Python 2 стоят до .py файловете
        Можем да ги дезактивираме генерално
        Не мислим за тях
        (освен при version control)


= slide 'import' do
    list:
        Всеки модул се импортва само по веднъж
        При импортването му се изпълнява целият файл


= slide 'В този ред на мисли, показвали ли сме ви това:' do
    example:
        import __hello__


= slide 'Модули' do
    example:
        from module import a, b, c
        a()


= slide 'Модули' do
    example:
        from module import a, b, c
        a()

        from module import a as b
        b()


= slide 'Модули' do
    example:
        from module import a, b, c
        a()

        from module import a as b
        b()

        from django.contrib.auth.models import User
        my_user = User()


= slide 'Модули' do
    example:
        from django.db import models
        my_model = models.Model()


= slide 'Модули' do
    example:
        import datetime
        now = datetime.datetime.now()

= slide 'if __name__ == "__main__":' do
    p Така можете да сте сигурни, че текущият файл е изпълнен, а не импортнат


= slide 'Search Path' do
    list:
        "вградените модули"
        текущата директория
        sys.path




= slide 'Search Path' do
    example:
        import sys
        print(sys.path)

= slide 'dir()' do
    p Връща списък със всички имена в модул

    example:
        import sys
        dir(sys)
        ['__displayhook__', '__doc__', '__excepthook__', '__interactivehook__',
        '__loader__', '__name__', '__package__', '__spec__', '__stderr__',
        '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames',
        '_debugmallocstats', '_getframe', '_home', '_mercurial', '_xoptions',
        'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix',
        'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
        'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',
        'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',
        'float_repr_style', 'getallocatedblocks', 'getcheckinterval',
        'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding',
        'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof',
        'getswitchinterval', 'gettrace', 'hash_info', 'hexversion',
        'implementation', 'int_info', 'intern', 'maxsize', 'maxunicode',
        'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache',
        'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
        'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace',
        'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info',
        'warnoptions']

= slide 'Пакети' do
    list:
        Модули, изградени само от файлове е твърде плоско решение
        Можем да групираме няколко файла (модули) в един свръх-модул
        За да направим една директория модул, трябва да създадем __init__.py файл вътре
        Това е инициализатора на модула и се изпълнява преди всичко останало

    example:
        panda/
            __init__.py
            head.py
            body.py
            belly.py
            eyes.py
            tail.py
            # ...


= slide 'Импортване на всичко от даден модул' do
    example:
        from panda import *

    ul
        li По този начин всичко от модула panda ще бъде "изсипано" в текущия скоуп
        li Нямате добра причина да правите това извън интерактивна конзола
        li А ние имаме няколко такива да ви отнемаме точки, ако го правите

= slide '__all__' do
    list:
        Има смисъл в __init__.py да дефинираме списък от стрингове __all__
        Само имената в него ще бъдат импортнати, ако се използва *

= slide 'Релативни пътища' do
    p Можем да пропуснем търсенето в sys.path и директно да импортнем нещо от текущата директория
    example:
        from . import panda

    p Можем да търсим и в "горния" възел
    example:
        from .. import panda

    p Или:
    example:
        from ..panda import tail


= slide 'Инсталиране на пакети' do
    p Long story short
    example:
        pip install package-name-goes-here

= slide 'От къде ги тегли?' do
    p <a href="https://pypi.python.org/">PyPI - the Python Package Index</a>

= slide 'Как да качим пакет там?' do
    list:
        Имаме нужда от модула distutils
        setup.py файл в основата директория на проекта
        И изпълнение на distutils.core.setup() в него

= slide 'Пример' do
    example:
      from distutils.core import setup

      setup(name='Distutils',
        version='1.0',
        description='Python Distribution Utilities',
        author='Greg Ward',
        author_email='gward@python.net',
        url='http://www.python.org/sigs/distutils-sig/',
        packages=['distutils', 'distutils.command'],
      )

    p <a href="https://docs.python.org/3.3/distutils/setupscript.html#meta-data">Distutils addition meta-data</a>

= slide 'Classifiers' do
    example:
        setup(...,
            classifiers=[
              'Development Status :: 4 - Beta',
              'Environment :: Console',
              'Environment :: Web Environment',
              'Intended Audience :: End Users/Desktop',
              'Intended Audience :: Developers',
              'Intended Audience :: System Administrators',
              'License :: OSI Approved :: Python Software Foundation License',
              'Operating System :: MacOS :: MacOS X',
              'Operating System :: Microsoft :: Windows',
              'Operating System :: POSIX',
              'Programming Language :: Python',
              'Topic :: Communications :: Email',
              'Topic :: Office/Business',
              'Topic :: Software Development :: Bug Tracking',
            ],
        )

    p <a href="https://pypi.python.org/pypi?%3Aaction=list_classifiers">List trove classifiers</a>

= slide 'Добре, имаме го и сега какво?' do
    list:
        python setup.py install - Инсталира
        python setup.py sdist - Създава архив, който лесно може да бъде инсталиран
        python setup.py bdist_wininstsdist - Създава инсталатор за уиндолс
        ...

= slide 'Терминология' do
    list:
        module
        pure python module
        extension module
        package
        root package

